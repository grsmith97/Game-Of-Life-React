{"version":3,"sources":["Game.js","index.js"],"names":["max","seed","Date","getMilliseconds","initialState","i","row","j","push","Math","floor","random","Game","useState","grid","setGrid","console","log","useEffect","timer","setTimeout","newArray","forEach","rowIndex","newRow","cell","cellIndex","newValue","top","left","right","bottom","topLeft","topRight","bottomLeft","bottomRight","liveAdjacencyCount","grow","every","clearTimeout","className","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uJAQA,I,IAFsBA,E,8CAHhBC,G,OAAO,IAAIC,MAAOC,mBAClBC,EAAe,GAIZC,EAAI,EAAGA,GAAK,MAAOA,EAAG,CAE7B,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,GAAK,IAAKA,IACxBD,EAAIE,MALcR,EAKI,EALIS,KAAKC,MAAMD,KAAKE,OAAOV,GAAQQ,KAAKC,MAAMV,MAOtEI,EAAaI,KAAKF,GAuELM,MAzBf,WAAiB,IAAD,EACUC,mBAAST,GADnB,mBACPU,EADO,KACDC,EADC,KASd,OAPAC,QAAQC,IAAIH,GAEZI,qBAAU,WACR,IAAMC,EAAQC,YAAW,kBAAML,EAhDtB,SAACD,GACZ,IAAIO,EAAW,GAuCf,OArCAP,EAAKQ,SAAQ,SAAChB,EAAKiB,GACjB,IAAIC,EAAS,GAEblB,EAAIgB,SAAQ,SAACG,EAAMC,GACjB,IAAIC,EAAW,EACTC,EAAMd,EAAKS,EAAW,GAAKT,EAAKS,EAAW,GAAGG,GAAa,EAC3DG,EAAOvB,EAAIoB,EAAY,GAAKpB,EAAIoB,EAAY,GAAK,EACjDI,EAAQxB,EAAIoB,EAAY,GAAKpB,EAAIoB,EAAY,GAAK,EAClDK,EAASjB,EAAKS,EAAW,GAAKT,EAAKS,EAAW,GAAGG,GAAa,EAE9DM,EAAUlB,EAAKS,EAAW,IAAKT,EAAKS,EAAW,GAAGG,EAAY,IAAU,EACxEO,EAAWnB,EAAKS,EAAW,IAAKT,EAAKS,EAAW,GAAGG,EAAY,IAAU,EACzEQ,EAAapB,EAAKS,EAAW,IAAKT,EAAKS,EAAW,GAAGG,EAAY,IAAU,EAC3ES,EAAcrB,EAAKS,EAAW,IAAKT,EAAKS,EAAW,GAAGG,EAAY,IAAU,EAElFV,QAAQC,IAAI,CACVe,UACAC,WACAC,aACAC,gBAGF,IAAMC,EAAqBR,EAAMC,EAAOC,EAAQC,EAASC,EAAUC,EAAWC,EAAaC,EAE9E,IAATV,EACyB,IAAvBW,GAAmD,IAAvBA,IAA0BT,EAAW,GAErD,IAATF,GACoB,IAAvBW,IAA0BT,EAAW,GAG3CH,EAAOhB,KAAKmB,MAGdN,EAASb,KAAKgB,MAGTH,EAQkCgB,CAAKvB,MAAQ,KACpD,OAAOA,EAAKwB,OAAM,SAAAhC,GAAG,OAAIA,EAAIgC,OAAM,SAAAb,GAAI,OAAa,IAATA,QAAec,aAAapB,GAAS,kBAAMoB,aAAapB,MAClG,CAACL,IAGF,sBAAK0B,UAAU,MAAf,UACE,qBAAKA,UAAU,SAAf,gCACA,qBAAKA,UAAU,OAAf,SACG1B,EAAK2B,KAAI,SAAAnC,GAAG,OACX,qBAAKkC,UAAU,MAAf,SACGlC,EAAImC,KAAI,SAAAhB,GAAI,OACXA,EAAO,qBAAKe,UAAU,SAAY,qBAAKA,UAAU,wBCvE/DE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b66a900e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\n\r\nconst seed = new Date().getMilliseconds();\r\nconst initialState = [];\r\n\r\nconst getRandomInt = (max) => Math.floor(Math.random(seed) * Math.floor(max));\r\n\r\nfor (let i = 0; i <= 100; ++i) {\r\n  let row = [];\r\n  for (let j = 0; j <= 100; j++) {\r\n    row.push(getRandomInt(2));\r\n  }\r\n  initialState.push(row);\r\n}\r\n\r\nconst grow = (grid) => {\r\n  let newArray = [];\r\n\r\n  grid.forEach((row, rowIndex) => {\r\n    let newRow = [];\r\n\r\n    row.forEach((cell, cellIndex) => {\r\n      let newValue = 0;\r\n      const top = grid[rowIndex - 1] ? grid[rowIndex - 1][cellIndex] : 0;\r\n      const left = row[cellIndex - 1] ? row[cellIndex - 1] : 0;\r\n      const right = row[cellIndex + 1] ? row[cellIndex + 1] : 0;\r\n      const bottom = grid[rowIndex + 1] ? grid[rowIndex + 1][cellIndex] : 0;\r\n\r\n      const topLeft = grid[rowIndex - 1] ? grid[rowIndex - 1][cellIndex - 1] || 0 : 0;\r\n      const topRight = grid[rowIndex - 1] ? grid[rowIndex - 1][cellIndex + 1] || 0 : 0;\r\n      const bottomLeft = grid[rowIndex + 1] ? grid[rowIndex + 1][cellIndex - 1] || 0 : 0;\r\n      const bottomRight = grid[rowIndex + 1] ? grid[rowIndex + 1][cellIndex + 1] || 0 : 0;\r\n\r\n      console.log({\r\n        topLeft,\r\n        topRight,\r\n        bottomLeft,\r\n        bottomRight\r\n      });\r\n\r\n      const liveAdjacencyCount = top + left + right + bottom + topLeft + topRight + bottomLeft + bottomRight;\r\n\r\n      if (cell === 1) {\r\n        if (liveAdjacencyCount === 2 || liveAdjacencyCount === 3) newValue = 1;\r\n      }\r\n      else if (cell === 0) {\r\n        if (liveAdjacencyCount === 3) newValue = 1;\r\n      }\r\n\r\n      newRow.push(newValue);\r\n    });\r\n\r\n    newArray.push(newRow);\r\n  });\r\n\r\n  return newArray;\r\n}\r\n\r\nfunction Game() {\r\n  const [grid, setGrid] = useState(initialState);\r\n  console.log(grid);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => setGrid(grow(grid)), 500);\r\n    return grid.every(row => row.every(cell => cell === 0)) ? clearTimeout(timer) : () => clearTimeout(timer);\r\n  }, [grid]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='header'>A Reaction to Life</div>\r\n      <div className='grid'>\r\n        {grid.map(row =>\r\n          <div className='row'>\r\n            {row.map(cell =>\r\n              cell ? <div className='cell' /> : <div className='empty' />\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Game from './Game';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}